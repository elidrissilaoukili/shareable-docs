#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct node
{
     int data;
     struct node *next;
} node;
node *head = NULL;

node *createNode(int value)
{
     node *newnode = (node *)malloc(sizeof(node));
     newnode->data = value;
     newnode->next = NULL;
     return newnode;
}

void insertAtEnd(int value)
{
     node *newnode = createNode(value);
     if (head == NULL)
          head = newnode;
     else
     {
          node *temp = head;
          while (temp->next != NULL)
               temp = temp->next;
          temp->next = newnode;
     }
}

void displayArray(int array[], int length)
{
     for (int i = 0; i < length; i++)
          printf("%d, ", array[i]);
}

void displayList()
{
     if (head == NULL)
          printf("List is empty!\n");
     else
     {
          node *temp = head;
          while (temp->next != NULL)
          {
               printf("%d->", temp->data);
               temp = temp->next;
          }
          printf("%d", temp->data);
     }
}

void remove_dub()
{
     node *ptr1, *ptr2, *dup;
     ptr1 = head;
     while (ptr1 != NULL && ptr1->next != NULL)
     {
          ptr2 = ptr1;
          while (ptr2->next != NULL)
          {
               if (ptr1->data == ptr2->next->data)
               {
                    dup = ptr2->next;
                    ptr2->next = ptr2->next->next;
                    free(dup);
               }
               else
                    ptr2 = ptr2->next;
          }
          ptr1 = ptr1->next;
     }
}

int main()
{
     int array[] = {4, 16, 4, 20, 24, 16, 16, 20, 24};
     int length = sizeof(array) / sizeof(array[0]);
     for (int i = 0; i < length; i++)
          insertAtEnd(array[i]);

     printf("\n");
     displayArray(array, length);
     printf("\n");
     displayList();

     printf("\n");
     remove_dub();
     displayList();

     return 0;
}